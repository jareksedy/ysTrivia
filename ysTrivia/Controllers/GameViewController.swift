//
//  GameViewController.swift
//  ysTrivia
//
//  Created by –Ø—Ä–æ—Å–ª–∞–≤ on 18.09.2021.
//

import UIKit

protocol GameViewControllerDelegate: AnyObject {
    func didEndGame(withResult result: GameSession)
}

class Observer {}

class GameViewController: UIViewController {
    
    // MARK: - Aborted game.
    
    var abortedGame: GamePersisted?
    
    // MARK: - Delegates.
    
    weak var gameDelegate: GameViewControllerDelegate?
    
    // MARK: - Outlets.
    
    @IBOutlet weak var currentQuestionNoLabel: UILabel!
    @IBOutlet weak var currentQuestionValueLabel: UILabel!
    @IBOutlet weak var currentQuestionLabel: UILabel!
    
    @IBOutlet weak var answerButtonA: UIButton!
    @IBOutlet weak var answerButtonB: UIButton!
    @IBOutlet weak var answerButtonC: UIButton!
    @IBOutlet weak var answerButtonD: UIButton!
    
    @IBOutlet weak var lifelineFiftyButton: UIButton!
    @IBOutlet weak var lifelineAskAudienceButton: UIButton!
    @IBOutlet weak var lifelinePhoneButton: UIButton!
    
    @IBOutlet weak var timerLabel: UILabel!
    
    @IBOutlet weak var endGameButton: UIButton!
    
    // MARK: - Array of answer buttons.
    
    lazy var answerButtons = [answerButtonA, answerButtonB, answerButtonC, answerButtonD]
    
    // MARK: - Instances.
    
    let game = Game.shared
    let gameSession = GameSession()
    let questionProvider = QuestionProvider()
    let gameSessionCaretaker = GameSessionCaretaker()
    let observer = Observer()
    
    // MARK: - Properties.
    
    lazy var difficultyIndex: Observable<Int> = Observable(gameSession.currentQuestionNo)
    
    // MARK: - Timer.
    
    var timer: Timer?
    var timerRunCount = 15
    var timerPaused = false
    
    // MARK: - Messages.
    
    let audienceTitle = "ü•∏ü§Æ –ü–æ–º–æ—â—å –∑–∞–ª–∞ ü•±üò´"
    let audienceMessage = "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π –≤ –∑–∞–ª–µ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî "
    
    let friendTitle = "ü§∑üèª‚Äç‚ôÇÔ∏è –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É ü§∑üèª‚Äç‚ôÇÔ∏è"
    let friendMessage = "–ò–∑–≤–∏–Ω–∏, –ø—Ä–∏—è—Ç–µ–ª—å, —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é, –Ω–æ –±–æ–ª—å—à–µ —Å–∫–ª–æ–Ω—è—é—Å—å –∫ –≤–∞—Ä–∏–∞–Ω—Ç—É "
    
    let endGameTitle = "ü§î –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É? ü§î"
    lazy var endGameMessage = """
        –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
        –∏ –∑–∞–±—Ä–∞—Ç—å –≤–∞—à –≤—ã–∏–≥—Ä—ã—à
        \(gameSession.earnedMoney.formatted) ‚ÇΩ?
        –í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–¥—É–º–∞–ª–∏?
        """
    
    let gameOverTitle = "üëæ –ü–∏–ø–µ—Ü! üëæ"
    lazy var gameOverMessage = """
        –°–æ–∂–∞–ª–µ—é, –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π!
        –í–∞—à –≤—ã–∏–≥—Ä—ã—à \(gameSession.earnedMoneyGuaranteed > 0 ? "–≤ —Ä–∞–∑–º–µ—Ä–µ –Ω–µ—Å–≥–æ—Ä–∞–µ–º–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ —Ä–∞–≤–µ–Ω \("\n" + gameSession.earnedMoneyGuaranteed.formatted) ‚ÇΩ." : "—Ä–∞–≤–µ–Ω –Ω—É–ª—é.")
        –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.
        """
    
    let winTitle = "üôåüèº –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üôåüèº"
    let winMessage = """
        –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –≠—Ç–æ –ø–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç—Ä–∏ –º–∏–ª–ª–∏–æ–Ω–∞ —Ä—É–±–ª–µ–π!
        –ü—Ä–∏–∑–Ω–∞–π—Ç–µ—Å—å —á–µ—Å—Ç–Ω–æ, –∂—É–ª—å–Ω–∏—á–∞–ª–∏? –ì—É–≥–ª–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã?
        –õ–∞–¥–Ω–æ, —Ç–∞–∫ —É–∂ –∏ –±—ã—Ç—å, –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–∏–≥—Ä—ã—à.
        """
    
    // MARK: - Private methods.
    
    private func pauseTimer() {
        
        guard game.clockMode else { return }
        guard timer != nil else { return }
        timerPaused = true
        
    }
    
    private func resumeTimer() {
        
        guard game.clockMode else { return }
        guard timer != nil else { return }
        timerPaused = false
    }
    
    private func stopTimer() {
        
        guard game.clockMode else { return }
        guard timer != nil else { return }
        timer!.invalidate()
        timer = nil
    }
    
    private func startTimer() {
        
        guard game.clockMode else { return }
        
        stopTimer()
        
        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
            
            if self.timerPaused { return }
            
            self.timerLabel.textColor = UIColor.systemPurple
            self.timerLabel.text = "00:" + String(format: "%02d", self.timerRunCount)
            self.timerRunCount -= 1
            
            if self.timerRunCount < 5 {
                self.timerLabel.textColor = .incorrect
            }

            if self.timerRunCount < 0 {
                self.timerRunCount = 0
                self.timerLabel.text = "00:" + String(format: "%02d", self.timerRunCount)
                timer.invalidate()
            }
        }
    }
    
    private func endGame(_ session: GameSession) {
        
        gameDelegate?.didEndGame(withResult: session)
        _ = self.navigationController?.popToRootViewController(animated: true)
    }
    
    private func addButtonActions() {
        
        for button in answerButtons {
            button?.addTarget(self, action: #selector(answerButtonAction), for: .touchUpInside)
        }
    }
    
    private func resetGameSession() {
        
        gameSession.currentQuestionNo = 1
        gameSession.isLifelineFiftyUsed = false
        gameSession.isLifelinePhoneUsed = false
        gameSession.isLifelineAskAudienceUsed = false
        gameSession.gameStatus = .inProgress
    }
    
    private func restoreGameSession() {
        
        guard let abortedGame = abortedGame else { return }
        
        gameSession.currentQuestionNo = abortedGame.currentQuestionNo
        gameSession.isLifelineFiftyUsed = abortedGame.isLifelineFiftyUsed
        gameSession.isLifelinePhoneUsed = abortedGame.isLifelinePhoneUsed
        gameSession.isLifelineAskAudienceUsed = abortedGame.isLifelineAskAudienceUsed
        gameSession.gameStatus = .inProgress
    }
    
    private func displayQuestion() {
        
        difficultyIndex.value = gameSession.currentQuestionNo
        
        if game.clockMode {
            timerLabel.isHidden = false
            timerRunCount = 15
            startTimer()
        } else {
            timerLabel.isHidden = true
        }
        
        updateButtons()
        
        guard let question = questionProvider.fetchRandom(for: difficultyIndex.value) else { return }
        guard let questionValue = game.payout[difficultyIndex.value] else { return }
        
        currentQuestionValueLabel.text = "\(questionValue.formatted) ‚ÇΩ"
        
        currentQuestionLabel.text = question.text
        
        for (index, answer) in question.answers.enumerated() {
            
            answerButtons[index]?.setTitle(answer.text, for: .normal)
            answerButtons[index]?.backgroundColor = .unanswered
            answerButtons[index]?.alpha = 1.0
            answerButtons[index]?.isEnabled = true
            answerButtons[index]?.isHidden = false
        }
        
        gameSession.currentQuestion = question
    }
    
    private func disableButtons(_ answerIndex: Int) {
        
        lifelineFiftyButton.isEnabled = false
        lifelineFiftyButton.alpha = 0.75
        
        lifelinePhoneButton.isEnabled = false
        lifelinePhoneButton.alpha = 0.75
        
        lifelineAskAudienceButton.isEnabled = false
        lifelineAskAudienceButton.alpha = 0.75
        
        endGameButton.isEnabled = false
        endGameButton.alpha = 0.75
        
        for button in answerButtons {
            button?.isEnabled = false
            button?.alpha = button?.tag != answerIndex ? 0.75 : 1.0
        }
    }
    
    private func isCorrect(_ answerIndex: Int) -> Bool {
        
        return gameSession.currentQuestion?.answers[answerIndex].correct ?? false
    }
    
    private func updateButtons() {
        
        if gameSession.isLifelineFiftyUsed {
            lifelineFiftyButton.isEnabled = false
            lifelineFiftyButton.alpha = 0.75
        } else {
            lifelineFiftyButton.isEnabled = true
            lifelineFiftyButton.alpha = 1.0
        }
        
        if gameSession.isLifelinePhoneUsed {
            lifelinePhoneButton.isEnabled = false
            lifelinePhoneButton.alpha = 0.75
        } else {
            lifelinePhoneButton.isEnabled = true
            lifelinePhoneButton.alpha = 1.0
        }
        
        if gameSession.isLifelineAskAudienceUsed {
            lifelineAskAudienceButton.isEnabled = false
            lifelineAskAudienceButton.alpha = 0.75
        } else {
            lifelineAskAudienceButton.isEnabled = true
            lifelineAskAudienceButton.alpha = 1.0
        }
        
        if gameSession.earnedMoney == 0 {
            
            endGameButton.setTitle("–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.", for: .normal)
            endGameButton.isEnabled = false
            endGameButton.alpha = 0.75
            
        } else {
            
            endGameButton.setTitle("–ó–∞–±—Ä–∞—Ç—å \(gameSession.earnedMoney.formatted) ‚ÇΩ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.", for: .normal)
            endGameButton.isEnabled = true
            endGameButton.alpha = 1.0
        }
    }
    
    // MARK: - Actions.
    
    @objc func answerButtonAction(_ sender: UIButton!) {
        
        stopTimer()
        
        let answerIndex = sender.tag
        
        disableButtons(answerIndex)
        answerButtons[answerIndex]?.backgroundColor = .answered
        
        delay { [self] in
            
            if isCorrect(answerIndex) {
                // –û–¢–í–ï–¢ –í–ï–†–ù–´–ô. –ò–î–ï–ú –î–ê–õ–¨–®–ï.
                answerButtons[answerIndex]?.backgroundColor = .correct
                delay {
                    if difficultyIndex.value < game.questionsTotal {
                        nextQuestion()
                    } else {
                        // –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê. –ò–ì–†–û–ö –í–´–ò–ì–†–ê–õ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –°–£–ú–ú–£.
                        win(answerIndex)
                    }
                }
            } else {
                // –û–¢–í–ï–¢ –ù–ï–í–ï–†–ù–´–ô. –ó–ê–í–ï–†–®–ê–ï–ú –ò–ì–†–£.
                gameOver(answerIndex)
            }
        }
    }
    
    @IBAction func lifelineFiftyAction(_ sender: Any) {
        
        guard let firstIndex = gameSession.currentQuestion?.correctIndex else { return }
        let secondIndex = Int.random(in: 0...3, excluding: firstIndex)
        
        lifelineFiftyButton.isEnabled = false
        lifelineFiftyButton.alpha = 0.75
        gameSession.isLifelineFiftyUsed = true
        
        for button in answerButtons {
            
            if button?.tag != firstIndex && button?.tag != secondIndex {
                
                button?.isEnabled = false
                button?.isHidden = true
            }
        }
    }
    
    @IBAction func lifelineAskAudienceAction(_ sender: Any) {
        
        guard let firstIndex = gameSession.currentQuestion?.correctIndex else { return }
        let secondIndex = Int.random(in: 0...3, excluding: firstIndex)
        
        pauseTimer()
        
        var audienceSuggests = 0
        
        if gameSession.isLifelineFiftyUsed { audienceSuggests = firstIndex } else {
            audienceSuggests = Int.random(in: 0...1) == 1 ? firstIndex : secondIndex
        }
        
        lifelineAskAudienceButton.isEnabled = false
        lifelineAskAudienceButton.alpha = 0.75
        gameSession.isLifelineAskAudienceUsed = true
        
        let answer = game.letterForAnswerIndex[audienceSuggests] ?? "–•/–ó"
        
        delay { [self] in
            displayAlert(withAlertTitle: audienceTitle,
                         andMessage: audienceMessage + "\(answer).") { _ in
                resumeTimer()
            }
        }
    }
    
    @IBAction func lifelinePhoneAction(_ sender: Any) {
        
        guard let firstIndex = gameSession.currentQuestion?.correctIndex else { return }
        let secondIndex = Int.random(in: 0...3, excluding: firstIndex)
        
        pauseTimer()
        
        var friendSuggests = 0
        
        if gameSession.isLifelineFiftyUsed { friendSuggests = firstIndex } else {
            friendSuggests = Int.random(in: 0...1) == 1 ? firstIndex : secondIndex
        }
        
        lifelinePhoneButton.isEnabled = false
        lifelinePhoneButton.alpha = 0.75
        gameSession.isLifelinePhoneUsed = true
        
        let answer = game.letterForAnswerIndex[friendSuggests] ?? "–•/–ó"
        let answerText = gameSession.currentQuestion?.answers[friendSuggests].text ?? "–•/3"
        
        delay { [self] in
            displayAlert(withAlertTitle: friendTitle,
                         andMessage: friendMessage + "\(answer). \(answerText).") { _ in
                resumeTimer()
            }
        }
    }
    
    @IBAction func endGameAction(_ sender: Any) {
        
        displayYesNoAlert(withAlertTitle: endGameTitle,
                          andMessage: endGameMessage) { _ in
            
            self.gameSession.gameStatus = .abortedByUser
            self.endGame(self.gameSession)
        }
    }
    
    // MARK: - Game lifecycle methods.
    
    func nextQuestion() {
        
        gameSession.currentQuestionNo += 1
        difficultyIndex.value = gameSession.currentQuestionNo
        
        displayQuestion()
        gameSessionCaretaker.save(gameSession)
    }
    
    func gameOver(_ answerIndex: Int) {
        
        answerButtons[answerIndex]?.backgroundColor = .incorrect
        answerButtons[gameSession.currentQuestion!.correctIndex]?.backgroundColor = .correct
        answerButtons[gameSession.currentQuestion!.correctIndex]?.alpha = 1.0
        
        gameSession.gameStatus = .lost
        
        delay { [self] in
            displayAlert(withAlertTitle: gameOverTitle, andMessage: gameOverMessage) { _ in
                self.endGame(self.gameSession)
            }
        }
    }
    
    func win(_ answerIndex: Int) {
        
        answerButtons[answerIndex]?.backgroundColor = .correct
        answerButtons[gameSession.currentQuestion!.correctIndex]?.alpha = 1.0
        
        gameSession.gameStatus = .won
        
        delay { [self] in
            displayAlert(withAlertTitle: winTitle, andMessage: winMessage) { _ in
                self.endGame(self.gameSession)
            }
        }
    }
    
    // MARK: - Observed.
    
    private func subscribe() {
        
        difficultyIndex.addObserver(observer, options: [.initial, .new, .old]) { dI, change in
            self.currentQuestionNoLabel.text = "–í–æ–ø—Ä–æ—Å ‚Ññ \(dI) / \(self.game.questionsTotal), \((dI - 1) * 100 / self.game.questionsTotal)% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        }
    }
    
    // MARK: - View controller methods.
    
    override func viewDidLoad() {
        
        super.viewDidLoad()
        navigationController?.isNavigationBarHidden = true
        
        subscribe()
        
        abortedGame != nil ? restoreGameSession() : resetGameSession()
        addButtonActions()
        displayQuestion()
    }
}
